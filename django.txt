def login(request):
    m = Member.objects.get(username=request.POST['username'])
    if m.password == request.POST['password']:
        request.session['member_id'] = m.id
        return HttpResponse(u"Você está autenticado.")
    else:
        return HttpResponse(u"Seu nome de usuário e senha não conferem.")
def logout(request):
    try:
        del request.session['member_id']
    except KeyError:
        pass
    return HttpResponse(u"Você saiu.")

Se SESSION_EXPIRE_AT_BROWSER_CLOSE for True, o Django usará cookies que duram enquanto o navegador estiver aberto –
ou seja, eles expirarão assim que o usuário fechar o seu navegador.
Use isso se você deseja que as pessoas tenham de se autenticar toda vez que abrem o seu navegador.

!!!rever conteudo sobre manufacturer

--exclude
Please, see the release notes
Excluí uma aplicação específica das aplicações cujo conteúdo é mostrado. Por exemplo, para especificadamente
 excluir a aplicação auth da saída, você deve chamar:

django-admin.py dumpdata --exclude=auth
Se você deseja excluir várias aplicações, use várias diretivas --exclude:

django-admin.py dumpdata --exclude=auth --exclude=contenttypes

--indent <num>
Por padrão, dumpdata exportará todos os dados em uma única linha. Isso não é fácil para humanos lerem,
então você pode usar a opção
--indent para imprimir uma bela saída com alguns espaços de indentação.
ADICIONAR NO SETTINGS: 
E-mail:
if BEGUG:
   EMAIL_BACKEND = 'django.core.email.backends.console.Email.Backend'
else:
   EMAIL_BACKEND ='django.core.email.backends.smpt.Email.Backend'

DEFAULT_FROM_EMAIL = 'currifabianbatista@gmai.com'
EMAIL_HOST_USER=config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS=config('EMAIL_HOST_TLS')
EMAIL_PORT=config('EMAIL_HOST_PORT')
EMAIL_HOST=config('EMAIL_HOST')


from django.core.mail  import  send_mail

criar arquivo aonde fique seus dados confidenciais
como o nome :.env
dentro dele adicionar:
EMAIL_HOST_USER='currifabianbatista@gmai.com'
EMAIL_HOST_PASSWORD=de99882882
EMAIL_USE_TLS=True(criptografia do email)
EMAIL_PORT=587(provedor de email)
EMAIL_HOST=smtp.kinghost.net(servidor de email)






send_mail ( 'Assunto aqui' ,  'Aqui está a mensagem.' ,  'from@example.com' , 
    [ 'to@example.com' ],  fail_silently = False )

Se você necessita de internacionalização: três passos
Insira as translation strings em seu código Python e nos templates.
Traduza essas strings, para as línguas que você quer suportar.
Ative o middleware de localização nas configurações do Django.
..admonition:: Por trás das cenas

O mecanismo de tradução do Django usa o módulo padrão gettext que acompanha o Python.

Paginação:
p = Paginator(objects, 2)

>>> p.count
4
>>> p.num_pages
2
>>> p.page_range
[1, 2]

>>> page1 = p.page(1)
>>> page1
<Page 1 of 2>
>>> page1.object_list
['john', 'paul']

>>> page2 = p.page(2)
>>> page2.object_list
['george', 'ringo']
>>> page2.has_next()
False
>>> page2.has_previous()
True
>>> page2.has_other_pages()
True
>>> page2.next_page_number()
3
>>> page2.previous_page_number()
1
>>> page2.start_index() # O índice iniciado em 1 do primeiro item nesta página
3
>>> page2.end_index() # O índice iniciado em 1 do último item nesta página
4
no HTML
{% for contact in contacts.object_list %}
    {# Cada "contato" é um objeto do model Contact. #}
    {{ contact.full_name|upper }}<br />
    ...
{% endfor %}

<div class="pagination">
    <span class="step-links">
        {% if contacts.has_previous %}
            <a href="?page={{ contacts.previous_page_number }}">anterior</a>
        {% endif %}

        <span class="current">
            Página {{ contacts.number }} of {{ contacts.paginator.num_pages }}.
        </span>

        {% if contacts.has_next %}
            <a href="?page={{ contacts.next_page_number }}">próxima</a>
        {% endif %}
    </span>
</div>

Métodos
Page.has_next()
Retorna True se existe uma página subseqüente.

Page.has_previous()
Retorna True se existe uma página anterior.

Page.has_other_pages()
Retorna True se existe uma página subsequente ou anterior.

Page.next_page_number()
Retorna o número da página subseqüente. Note que este é um método “burro” e
vai apenas retornar o número da página subseqüente, a página existindo ou não.

Page.previous_page_number()
Retorna o número da página anterior. Note que este é um método “burro” e vai
apenas retornar o número da página anterior, a página existindo ou não.

Page.start_index()
Retorna o índice iniciado em 1 do primeiro objeto na página,
relativo a todos os objetos na lista do paginador. Por exemplo,quando se pagina uma lista
com 5 objetos a 2 objetos por página, o start_index() da segunda página devolveria 3.

Page.end_index()
Retorna o índice iniciado em 1 do último objeto na página,
relativo a todos os objetos na lista do paginador. Por exemplo,
quando se pagina uma lista com 5 objetos a 2 objetos por página,
o end_index() da segunda página devolveria 4.

Atributos:
Page.object_list
A lista de objetos nesta página.

Page.number
O número da página com índice começando em 1.

Page.paginator
O Paginator associado ao objeto.


CLASSES: 
max_digits=7(maximo de digitos)
decimal_places=2(2 numeros depois da virgulha)
 para ordenar as classes:
       Class Meta:
               ordering=('-nome_da_class_date',)
 para criar um url padrão(definir url):
       from django.urls import reverse
       na classe :
             def get_absolute_url(self):
                 return reverse('app_name:name_da_url',kwargs= {'nome':self.nome}) comentaio:
                                                  (no Kwargs passe o valor que voce que levar)



Celery 

pip install celery

Chat:
 pip install channels
pip install channels_redis
no settings/apps:
adicionar channels
ASGI_APPLICATION='chatty.asgi.application'|
crie um classe mensagem:
   nele adicione valor e data 
ex: class Message (models.Model):
     value= models.CharField(max_Length=1000000)
     date= models.DateTimeField(default datetime.now, blank-True)

POSTGRESSQL
PIP INSTALL PostgreSQL
Quando for instalar salvar suas senha e login do cadastro
Neste passo defina a senha para o seu usário do banco de dados, lembre dela…
para rodar o banco instalar uma biblioteca :
   pip install psycopg2

no settings:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DB_NAME', 'nome_do_banco'),
        'USER': os.environ.get('DB_USER', 'nome_do_user'),
        'PASSWORD': os.environ.get('DB_PASS', 'senha_do_user'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
explicação das linhas acima
DB_NAME: nome do banco de dados;
DB_USER: nome do usuário que você criou previamente;
DB_PASS: senha do usuário;
HOST:  pode deixar localhost, já que o servidor  é  a sua máquina;
PORT: se vocẽ não mudou, 5432 é a correta;

como usar args():

args=tupla

def soma(*numero):
   sum(numero)
args é o *
assim podemos somar varios numero em vez de colocar uma quantidade

como usar kwargs()
 kwargs=dicionario
def soma(**nome):
   print(nome)
soma(nome='fabian')
nome:fabian

kwargs é o **